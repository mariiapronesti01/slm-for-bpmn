[
    {
        "instruction": "You are an expert in transforming process descriptions into structured BPMN representations. Your task is to generate a Python dictionary following this structure:\n``` python\n{\n    'start_nodes': [\n        {\n            'id': '<unique_id>',\n            'name': '<start_node_name>',\n            'BPMNtype': 'startEvent',\n            'incoming': [],\n            'outgoing': ['<next_node_id>']\n        }\n    ],\n    'nodes': [\n        {\n            'id': '<unique_id>',\n            'name': '<node_name>',\n            'BPMNtype': '<BPMN_element_type>',\n            'incoming': ['<previous_node_id>'],\n            'outgoing': ['<next_node_id>']\n        },\n        ...\n    ],\n    'end_nodes': [\n        {   \n            'id': '<unique_id>',\n            'name': '<end_node_name>',\n            'BPMNtype': 'endEvent',\n            'incoming': ['<previous_node_id>'],\n            'outgoing': []\n        }\n    ],\n    'lanes' : [\n        {\n            'id': '<unique_id>',\n            'name' : '<lane_name>',\n            'nodes' : ['<id_of_node_in_lane>', ...]\n        },\n        ...\n    ]\n}\n```\nKey Rules:\n1. Lanes:\n- Include lanes only if multiple actors (or roles) are explicitly mentioned.\n- Exclude lanes if only \"You\" is mentioned as the actor.\n- When lanes exist, all BPMN elements, including start and end nodes, must belong to a lane.\n- Assign start and end nodes to the most appropriate lanes.\n2. Flows:\n- Tasks must have exactly one incoming and one outgoing connection.\n- Gateways:\n-- Splitting Gateway: 1 incoming, multiple outgoing.\n-- Merging Gateway: Multiple incoming, 1 outgoing.\n3. BPMN Element Types:\n- Events: startEvent, endEvent\n- Tasks: task, userTask, serviceTask, scriptTask, manualTask, sendTask, receiveTask, businessRuleTask\n- Gateways: exclusiveGateway, parallelGateway\n4. Output Requirements:\n- Produce a valid JSON-like Python dictionary.\n- Ensure unique IDs and valid connections.\n\n### EXAMPLES\nInput:\n\"The process starts when the user logs in. The system checks the login details. If valid, the user dashboard is displayed. Otherwise, an error message is shown. The process ends.\"\nExpected Output: \n``` python\n{\n    'start_nodes': [{'id': 'startEvent_123', 'name': 'Start', 'BPMNtype': 'startEvent', 'incoming': [], 'outgoing': ['userTask_456']}],\n    'nodes': [\n        {'id': 'userTask_456', 'name': 'User logs in', 'BPMNtype': 'userTask', 'incoming': ['startEvent_123'], 'outgoing': ['serviceTask_789']},\n        {'id': 'serviceTask_789', 'name': 'Check login details', 'BPMNtype': 'serviceTask', 'incoming': ['userTask_456'], 'outgoing': ['exclusiveGateway_101']},\n        {'id': 'exclusiveGateway_101', 'name': 'Is login valid?', 'BPMNtype': 'exclusiveGateway', 'incoming': ['serviceTask_789'], 'outgoing': ['userTask_102', 'userTask_103']},\n        {'id': 'userTask_102', 'name': 'Show dashboard', 'BPMNtype': 'userTask', 'incoming': ['exclusiveGateway_101'], 'outgoing': ['endEvent_104']},\n        {'id': 'userTask_103', 'name': 'Show error message', 'BPMNtype': 'userTask', 'incoming': ['exclusiveGateway_101'], 'outgoing': ['endEvent_104']}\n    ],\n    'end_nodes': [{'id': 'endEvent_104', 'name': 'End', 'BPMNtype': 'endEvent', 'incoming': ['userTask_102', 'userTask_103'], 'outgoing': []}],\n    'lanes': []\n}\n``` \n\nExample 2: With Lanes\nInput:\n\"A customer places an order. The sales team validates the order. If valid, the team prepares the shipment. Otherwise, the customer service contacts the customer. The process ends.\"\nExpected Output:\n``` python\n{\n    'start_nodes': [{'id': 'startEvent_201', 'name': 'Start', 'BPMNtype': 'startEvent', 'incoming': [], 'outgoing': ['userTask_202']}],\n    'nodes': [\n        {'id': 'userTask_202', 'name': 'Place order', 'BPMNtype': 'userTask', 'incoming': ['startEvent_201'], 'outgoing': ['manualTask_203']},\n        {'id': 'manualTask_203', 'name': 'Validate order', 'BPMNtype': 'manualTask', 'incoming': ['userTask_202'], 'outgoing': ['exclusiveGateway_204']},\n        {'id': 'exclusiveGateway_204', 'name': 'Is order valid?', 'BPMNtype': 'exclusiveGateway', 'incoming': ['manualTask_203'], 'outgoing': ['serviceTask_205', 'sendTask_206']},\n        {'id': 'serviceTask_205', 'name': 'Prepare shipment', 'BPMNtype': 'serviceTask', 'incoming': ['exclusiveGateway_204'], 'outgoing': ['endEvent_207']},\n        {'id': 'sendTask_206', 'name': 'Contact customer', 'BPMNtype': 'sendTask', 'incoming': ['exclusiveGateway_204'], 'outgoing': ['endEvent_207']}\n    ],\n    'end_nodes': [{'id': 'endEvent_207', 'name': 'End', 'BPMNtype': 'endEvent', 'incoming': ['serviceTask_205', 'sendTask_206'], 'outgoing': []}],\n    'lanes': [\n        {'id': 'lane_301', 'name': 'Customer', 'nodes': ['startEvent_201', 'userTask_202']},\n        {'id': 'lane_302', 'name': 'Sales Team', 'nodes': ['manualTask_203', 'exclusiveGateway_204', 'serviceTask_205']},\n        {'id': 'lane_304', 'name': 'Customer Service', 'nodes': ['sendTask_206', 'endEvent_207']}\n    ]\n}\n```\n",
        "input": "Please generate the JSON file corresponding to the following textual description: \nThe text below is about the account payable process: it starts with sending to vendor accounting department.\nWhen the processing of sending to the vendor accounting department is completed, you need to create a receipt report.\nWhen a receiving report is completed you must check a three-way match twice.\nAfter doubling a three-way match, you need to schedule the payment.\nThe process is now complete.",
        "output": "{'start_nodes': [{'id': 'startEvent_915', 'name': 'Unnamed', 'BPMNtype': 'startEvent', 'incoming': [], 'outgoing': ['task_495']}], 'nodes': [{'id': 'task_495', 'name': 'send to the vendor accounting department', 'BPMNtype': 'task', 'incoming': ['startEvent_915'], 'outgoing': ['task_513']}, {'id': 'task_513', 'name': 'create a receiving report', 'BPMNtype': 'task', 'incoming': ['task_495'], 'outgoing': ['task_842']}, {'id': 'task_842', 'name': 'double check a three-way match', 'BPMNtype': 'task', 'incoming': ['task_513'], 'outgoing': ['task_527']}, {'id': 'task_527', 'name': 'schedule the payment', 'BPMNtype': 'task', 'incoming': ['task_842'], 'outgoing': ['endEvent_973']}], 'end_nodes': [{'id': 'endEvent_973', 'name': 'Unnamed', 'BPMNtype': 'endEvent', 'incoming': ['task_527'], 'outgoing': []}], 'lanes': []}"
    },
    {
        "instruction": "You are an expert in transforming process descriptions into structured BPMN representations. Your task is to generate a Python dictionary following this structure:\n``` python\n{\n    'start_nodes': [\n        {\n            'id': '<unique_id>',\n            'name': '<start_node_name>',\n            'BPMNtype': 'startEvent',\n            'incoming': [],\n            'outgoing': ['<next_node_id>']\n        }\n    ],\n    'nodes': [\n        {\n            'id': '<unique_id>',\n            'name': '<node_name>',\n            'BPMNtype': '<BPMN_element_type>',\n            'incoming': ['<previous_node_id>'],\n            'outgoing': ['<next_node_id>']\n        },\n        ...\n    ],\n    'end_nodes': [\n        {   \n            'id': '<unique_id>',\n            'name': '<end_node_name>',\n            'BPMNtype': 'endEvent',\n            'incoming': ['<previous_node_id>'],\n            'outgoing': []\n        }\n    ],\n    'lanes' : [\n        {\n            'id': '<unique_id>',\n            'name' : '<lane_name>',\n            'nodes' : ['<id_of_node_in_lane>', ...]\n        },\n        ...\n    ]\n}\n```\nKey Rules:\n1. Lanes:\n- Include lanes only if multiple actors (or roles) are explicitly mentioned.\n- Exclude lanes if only \"You\" is mentioned as the actor.\n- When lanes exist, all BPMN elements, including start and end nodes, must belong to a lane.\n- Assign start and end nodes to the most appropriate lanes.\n2. Flows:\n- Tasks must have exactly one incoming and one outgoing connection.\n- Gateways:\n-- Splitting Gateway: 1 incoming, multiple outgoing.\n-- Merging Gateway: Multiple incoming, 1 outgoing.\n3. BPMN Element Types:\n- Events: startEvent, endEvent\n- Tasks: task, userTask, serviceTask, scriptTask, manualTask, sendTask, receiveTask, businessRuleTask\n- Gateways: exclusiveGateway, parallelGateway\n4. Output Requirements:\n- Produce a valid JSON-like Python dictionary.\n- Ensure unique IDs and valid connections.\n\n### EXAMPLES\nInput:\n\"The process starts when the user logs in. The system checks the login details. If valid, the user dashboard is displayed. Otherwise, an error message is shown. The process ends.\"\nExpected Output: \n``` python\n{\n    'start_nodes': [{'id': 'startEvent_123', 'name': 'Start', 'BPMNtype': 'startEvent', 'incoming': [], 'outgoing': ['userTask_456']}],\n    'nodes': [\n        {'id': 'userTask_456', 'name': 'User logs in', 'BPMNtype': 'userTask', 'incoming': ['startEvent_123'], 'outgoing': ['serviceTask_789']},\n        {'id': 'serviceTask_789', 'name': 'Check login details', 'BPMNtype': 'serviceTask', 'incoming': ['userTask_456'], 'outgoing': ['exclusiveGateway_101']},\n        {'id': 'exclusiveGateway_101', 'name': 'Is login valid?', 'BPMNtype': 'exclusiveGateway', 'incoming': ['serviceTask_789'], 'outgoing': ['userTask_102', 'userTask_103']},\n        {'id': 'userTask_102', 'name': 'Show dashboard', 'BPMNtype': 'userTask', 'incoming': ['exclusiveGateway_101'], 'outgoing': ['endEvent_104']},\n        {'id': 'userTask_103', 'name': 'Show error message', 'BPMNtype': 'userTask', 'incoming': ['exclusiveGateway_101'], 'outgoing': ['endEvent_104']}\n    ],\n    'end_nodes': [{'id': 'endEvent_104', 'name': 'End', 'BPMNtype': 'endEvent', 'incoming': ['userTask_102', 'userTask_103'], 'outgoing': []}],\n    'lanes': []\n}\n``` \n\nExample 2: With Lanes\nInput:\n\"A customer places an order. The sales team validates the order. If valid, the team prepares the shipment. Otherwise, the customer service contacts the customer. The process ends.\"\nExpected Output:\n``` python\n{\n    'start_nodes': [{'id': 'startEvent_201', 'name': 'Start', 'BPMNtype': 'startEvent', 'incoming': [], 'outgoing': ['userTask_202']}],\n    'nodes': [\n        {'id': 'userTask_202', 'name': 'Place order', 'BPMNtype': 'userTask', 'incoming': ['startEvent_201'], 'outgoing': ['manualTask_203']},\n        {'id': 'manualTask_203', 'name': 'Validate order', 'BPMNtype': 'manualTask', 'incoming': ['userTask_202'], 'outgoing': ['exclusiveGateway_204']},\n        {'id': 'exclusiveGateway_204', 'name': 'Is order valid?', 'BPMNtype': 'exclusiveGateway', 'incoming': ['manualTask_203'], 'outgoing': ['serviceTask_205', 'sendTask_206']},\n        {'id': 'serviceTask_205', 'name': 'Prepare shipment', 'BPMNtype': 'serviceTask', 'incoming': ['exclusiveGateway_204'], 'outgoing': ['endEvent_207']},\n        {'id': 'sendTask_206', 'name': 'Contact customer', 'BPMNtype': 'sendTask', 'incoming': ['exclusiveGateway_204'], 'outgoing': ['endEvent_207']}\n    ],\n    'end_nodes': [{'id': 'endEvent_207', 'name': 'End', 'BPMNtype': 'endEvent', 'incoming': ['serviceTask_205', 'sendTask_206'], 'outgoing': []}],\n    'lanes': [\n        {'id': 'lane_301', 'name': 'Customer', 'nodes': ['startEvent_201', 'userTask_202']},\n        {'id': 'lane_302', 'name': 'Sales Team', 'nodes': ['manualTask_203', 'exclusiveGateway_204', 'serviceTask_205']},\n        {'id': 'lane_304', 'name': 'Customer Service', 'nodes': ['sendTask_206', 'endEvent_207']}\n    ]\n}\n```\n",
        "input": "Please generate the JSON file corresponding to the following textual description: \nThe following text is about the debt receivable procedure, which starts with the buyer's details.\nWhen the purchase process is completed, you must send the buyer your sale terms.\nAfter sending the buyer your terms of sale, the process is split into 2 parallel branches : customer payment terms and the invoice in your accounting software.\nOnce all pre-tasks are performed, one or more of the following paths should be executed: monthly contact with your client, recording your activity digitally, making a second physical copy.\nAfter that, one or more of the following paths should be executed : - recording the sales on credit of services, - recording the sales on credit of goods\nThe process is now complete.",
        "output": "{'start_nodes': [{'id': 'startEvent_658', 'name': 'Unnamed', 'BPMNtype': 'startEvent', 'incoming': [], 'outgoing': ['task_194']}], 'nodes': [{'id': 'task_194', 'name': \"record the buyer's details\", 'BPMNtype': 'task', 'incoming': ['startEvent_658'], 'outgoing': ['task_165']}, {'id': 'task_165', 'name': 'send the buyer your terms of sale', 'BPMNtype': 'task', 'incoming': ['task_194'], 'outgoing': ['parallelGateway_693']}, {'id': 'parallelGateway_693', 'name': 'Unnamed', 'BPMNtype': 'parallelGateway', 'incoming': ['task_165'], 'outgoing': ['task_790', 'task_985']}, {'id': 'task_790', 'name': 'check customer payment terms', 'BPMNtype': 'task', 'incoming': ['parallelGateway_693'], 'outgoing': ['parallelGateway_131']}, {'id': 'task_985', 'name': 'send the invoice in your accounting software', 'BPMNtype': 'task', 'incoming': ['parallelGateway_693'], 'outgoing': ['parallelGateway_131']}, {'id': 'parallelGateway_131', 'name': 'Unnamed', 'BPMNtype': 'parallelGateway', 'incoming': ['task_790', 'task_985'], 'outgoing': ['exclusiveGateway_526']}, {'id': 'exclusiveGateway_526', 'name': 'Unnamed', 'BPMNtype': 'exclusiveGateway', 'incoming': ['parallelGateway_131'], 'outgoing': ['task_436', 'task_864', 'task_468']}, {'id': 'task_436', 'name': 'establish monthly contact with your client', 'BPMNtype': 'task', 'incoming': ['exclusiveGateway_526'], 'outgoing': ['exclusiveGateway_375']}, {'id': 'task_864', 'name': 'record your activity digitally', 'BPMNtype': 'task', 'incoming': ['exclusiveGateway_526'], 'outgoing': ['exclusiveGateway_375']}, {'id': 'task_468', 'name': 'make a second physical copy', 'BPMNtype': 'task', 'incoming': ['exclusiveGateway_526'], 'outgoing': ['exclusiveGateway_375']}, {'id': 'exclusiveGateway_375', 'name': 'Unnamed', 'BPMNtype': 'exclusiveGateway', 'incoming': ['task_436', 'task_864', 'task_468'], 'outgoing': ['exclusiveGateway_973']}, {'id': 'exclusiveGateway_973', 'name': 'Unnamed', 'BPMNtype': 'exclusiveGateway', 'incoming': ['exclusiveGateway_375'], 'outgoing': ['task_352', 'task_231']}, {'id': 'task_352', 'name': 'record the sales on credit of services', 'BPMNtype': 'task', 'incoming': ['exclusiveGateway_973'], 'outgoing': ['exclusiveGateway_324']}, {'id': 'task_231', 'name': 'record the sales on credit of goods', 'BPMNtype': 'task', 'incoming': ['exclusiveGateway_973'], 'outgoing': ['exclusiveGateway_324']}, {'id': 'exclusiveGateway_324', 'name': 'Unnamed', 'BPMNtype': 'exclusiveGateway', 'incoming': ['task_352', 'task_231'], 'outgoing': ['endEvent_609']}], 'end_nodes': [{'id': 'endEvent_609', 'name': 'Unnamed', 'BPMNtype': 'endEvent', 'incoming': ['exclusiveGateway_324'], 'outgoing': []}], 'lanes': []}"
    }
]