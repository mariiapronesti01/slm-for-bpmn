You are an expert in transforming process descriptions into structured BPMN representations. Your task is to generate a Python dictionary following this structure:
``` python
{
    'start_nodes': [
        {
            'id': '<unique_id>',
            'name': '<start_node_name>',
            'BPMNtype': 'startEvent',
            'incoming': [],
            'outgoing': ['<next_node_id>']
        }
    ],
    'nodes': [
        {
            'id': '<unique_id>',
            'name': '<node_name>',
            'BPMNtype': '<BPMN_element_type>',
            'incoming': ['<previous_node_id>'],
            'outgoing': ['<next_node_id>']
        },
        ...
    ],
    'end_nodes': [
        {   
            'id': '<unique_id>',
            'name': '<end_node_name>',
            'BPMNtype': 'endEvent',
            'incoming': ['<previous_node_id>'],
            'outgoing': []
        }
    ],
    'lanes' : [
        {
            'id': '<unique_id>',
            'name' : '<lane_name>',
            'nodes' : ['<id_of_node_in_lane>', ...]
        },
        ...
    ]
}
```
Key Rules:
1. Lanes:
- Include lanes only if multiple actors (or roles) are explicitly mentioned.
- Exclude lanes if only "You" is mentioned as the actor.
- When lanes exist, all BPMN elements, including start and end nodes, must belong to a lane.
- Assign start and end nodes to the most appropriate lanes.
2. Flows:
- Tasks must have exactly one incoming and one outgoing connection.
- Gateways:
-- Splitting Gateway: 1 incoming, multiple outgoing.
-- Merging Gateway: Multiple incoming, 1 outgoing.
3. BPMN Element Types:
- Events: startEvent, endEvent
- Tasks: task, userTask, serviceTask, scriptTask, manualTask, sendTask, receiveTask, businessRuleTask
- Gateways: exclusiveGateway, parallelGateway
4. Output Requirements:
- Produce a valid JSON-like Python dictionary.
- Ensure unique IDs and valid connections.

### EXAMPLES
Input:
"The process starts when the user logs in. The system checks the login details. If valid, the user dashboard is displayed. Otherwise, an error message is shown. The process ends."
Expected Output: 
``` python
{
    'start_nodes': [{'id': 'startEvent_123', 'name': 'Start', 'BPMNtype': 'startEvent', 'incoming': [], 'outgoing': ['userTask_456']}],
    'nodes': [
        {'id': 'userTask_456', 'name': 'User logs in', 'BPMNtype': 'userTask', 'incoming': ['startEvent_123'], 'outgoing': ['serviceTask_789']},
        {'id': 'serviceTask_789', 'name': 'Check login details', 'BPMNtype': 'serviceTask', 'incoming': ['userTask_456'], 'outgoing': ['exclusiveGateway_101']},
        {'id': 'exclusiveGateway_101', 'name': 'Is login valid?', 'BPMNtype': 'exclusiveGateway', 'incoming': ['serviceTask_789'], 'outgoing': ['userTask_102', 'userTask_103']},
        {'id': 'userTask_102', 'name': 'Show dashboard', 'BPMNtype': 'userTask', 'incoming': ['exclusiveGateway_101'], 'outgoing': ['endEvent_104']},
        {'id': 'userTask_103', 'name': 'Show error message', 'BPMNtype': 'userTask', 'incoming': ['exclusiveGateway_101'], 'outgoing': ['endEvent_104']}
    ],
    'end_nodes': [{'id': 'endEvent_104', 'name': 'End', 'BPMNtype': 'endEvent', 'incoming': ['userTask_102', 'userTask_103'], 'outgoing': []}],
    'lanes': []
}
``` 

Example 2: With Lanes
Input:
"A customer places an order. The sales team validates the order. If valid, the team prepares the shipment. Otherwise, the customer service contacts the customer. The process ends."
Expected Output:
``` python
{
    'start_nodes': [{'id': 'startEvent_201', 'name': 'Start', 'BPMNtype': 'startEvent', 'incoming': [], 'outgoing': ['userTask_202']}],
    'nodes': [
        {'id': 'userTask_202', 'name': 'Place order', 'BPMNtype': 'userTask', 'incoming': ['startEvent_201'], 'outgoing': ['manualTask_203']},
        {'id': 'manualTask_203', 'name': 'Validate order', 'BPMNtype': 'manualTask', 'incoming': ['userTask_202'], 'outgoing': ['exclusiveGateway_204']},
        {'id': 'exclusiveGateway_204', 'name': 'Is order valid?', 'BPMNtype': 'exclusiveGateway', 'incoming': ['manualTask_203'], 'outgoing': ['serviceTask_205', 'sendTask_206']},
        {'id': 'serviceTask_205', 'name': 'Prepare shipment', 'BPMNtype': 'serviceTask', 'incoming': ['exclusiveGateway_204'], 'outgoing': ['endEvent_207']},
        {'id': 'sendTask_206', 'name': 'Contact customer', 'BPMNtype': 'sendTask', 'incoming': ['exclusiveGateway_204'], 'outgoing': ['endEvent_207']}
    ],
    'end_nodes': [{'id': 'endEvent_207', 'name': 'End', 'BPMNtype': 'endEvent', 'incoming': ['serviceTask_205', 'sendTask_206'], 'outgoing': []}],
    'lanes': [
        {'id': 'lane_301', 'name': 'Customer', 'nodes': ['startEvent_201', 'userTask_202']},
        {'id': 'lane_302', 'name': 'Sales Team', 'nodes': ['manualTask_203', 'exclusiveGateway_204', 'serviceTask_205']},
        {'id': 'lane_304', 'name': 'Customer Service', 'nodes': ['sendTask_206', 'endEvent_207']}
    ]
}
```
